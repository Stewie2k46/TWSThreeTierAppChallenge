pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS = credentials('docker-creds')  // Docker Hub credentials
        GITHUB_CREDENTIALS = credentials('github-creds')  // GitHub credentials
        KUBECONFIG_CREDENTIALS = credentials('minikube-kubeconfig')  // Minikube kubeconfig credentials
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'github-creds', url: 'https://github.com/Stewie2k46/TWSThreeTierAppChallenge.git', branch: 'main'
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                dir('Application-Code/backend') {
                    script {
                        docker.build("stewiedocker46/backend:latest")
                    }
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                dir('Application-Code/frontend') {
                    script {
                        docker.build("stewiedocker46/frontend:latest")
                    }
                }
            }
        }

        stage('Push Backend Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-creds') {
                        docker.image('stewiedocker46/backend:latest').push()
                    }
                }
            }
        }

        stage('Push Frontend Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-creds') {
                        docker.image('stewiedocker46/frontend:latest').push()
                    }
                }
            }
        }

        stage('Deploy Backend to Minikube') {
            steps {
                withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir('Kubernetes-Manifests-file/Backend') {
                        sh 'kubectl apply -f .'
                    }
                }
            }
        }

        stage('Deploy Frontend to Minikube') {
            steps {
                withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir('Kubernetes-Manifests-file/Frontend') {
                        sh 'kubectl apply -f .'
                    }
                }
            }
        }

        stage('Deploy Database to Minikube') {
            steps {
                withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG')]) {
                    dir('Kubernetes-Manifests-file/Database') {
                        sh 'kubectl apply -f .'
                    }
                }
            }
        }

        stage('Deploy Ingress to Minikube') {
            steps {
                withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG')]) {
                    sh 'kubectl apply -f Kubernetes-Manifests-file/ingress.yaml'
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after the pipeline runs
        }
    }
}
