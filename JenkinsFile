pipeline {
    agent any

    environment {
        FRONTEND_ECR_URI = "public.ecr.aws/p5f6x8d7/three-tier-frontend"
        BACKEND_ECR_URI = "public.ecr.aws/p5f6x8d7/three-tier-backend"
        AWS_REGION = 'us-west-2'
        IMAGE_TAG = "latest"
        AWS_CREDENTIALS = credentials('aws-ecr-creds')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'git-hub', url: 'https://github.com/Stewie2k46/TWSThreeTierAppChallenge.git', branch: 'main'
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-ecr-creds',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        // Login to ECR to ensure we have access to push or pull images
                        sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_ECR_URI"
                        sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $BACKEND_ECR_URI"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'minikube-kubeconfig']) {
                        // Deploying the frontend, backend, and database services and the ingress file
                        sh 'kubectl apply -f Kubernetes-Manifests-file/Frontend'
                        sh 'kubectl apply -f Kubernetes-Manifests-file/Backend'
                        sh 'kubectl apply -f Kubernetes-Manifests-file/Database'
                        sh 'kubectl apply -f Kubernetes-Manifests-file/ingress.yaml'
                    }
                }
            }
        }

        stage('Test Deployment') {
            steps {
                script {
                    // Check the status of the pods in the three-tier namespace
                    sh 'kubectl get pods -n three-tier'
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace"
            cleanWs()
        }
        success {
            echo 'Deployment succeeded'
        }
        failure {
            echo 'Deployment failed'
        }
    }
}
